
  *****  TP3 - Traitement d’un signal ECG *****
  
  
      ***Le Code: ***

clear all
close all
clc


%Declaration des variable
load('ecg.mat');
fe = 500;
N = length(ecg);
t = (0:N-1)*1/fe;
f=(0:N-1)*(fe/N);
fc = 0.5;
fc0 = 50;
fc1=40;

%[0.5;1.5] la taille d une periode
%%
%tarnsformer de fourier rapide 
y = fft(ecg);
fshift = (-N/2:N/2-1)*(fe/N);

%filtrage

   %creation du filtre pass haut
filtre_pass_Haut = ones(size(ecg));
index_fc = ceil((fc*N)/fe);
filtre_pass_Haut(1:index_fc) = 0;
filtre_pass_Haut(N-index_fc+1:N) = 0;

    %filtrage 
ecg_filtre_freq = filtre_pass_Haut .*y;

    %restitution du signal filtrer
 ecg_filtre_temp = ifft(ecg_filtre_freq,"symmetric");  
 
       %le bruit de bass frequence
 bruit= ecg-ecg_filtre_temp;
 
%% 
 %filtrage du bruit d'interferance
 
    %creation du filtre
    filtre_interferance = ones(size(ecg));
    index_fc0 = ceil((fc0*N)/fe)+1;
    filtre_interferance(index_fc0)=0;
    filtre_interferance(N-index_fc0+1)=0;
    
    %application du filtre
    ecg_filtre_int_freq = filtre_interferance .*fft(ecg_filtre_temp);
 
    %restitution du signal filtrer
    ecg_filtre_int_temp = ifft(ecg_filtre_int_freq,"symmetric");  
    
    bruit_inter = ecg_filtre_temp-ecg_filtre_int_temp; 
 
 
%%
%tarnsformer de fourier rapide 
y = fft(ecg);
fshift = (-N/2:N/2-1)*(fe/N);

%filtrage

   %creation du filtre pass haut
filtre_pass_Haut = ones(size(ecg));
index_fc = ceil((fc*N)/fe);
filtre_pass_Haut(1:index_fc) = 0;
filtre_pass_Haut(N-index_fc+1:N) = 0;

    %filtrage 
ecg_filtre_freq = filtre_pass_Haut .*y;

    %restitution du signal filtrer
 ecg_filtre_temp = ifft(ecg_filtre_freq,"symmetric");  
 
       %le bruit de bass frequence
 bruit= ecg-ecg_filtre_temp;
 
%% 
 %filtrage du bruit haute frequence
 
    %creation du filtre pass bas
    filtre_pass_bas = zeros(size(ecg));
    index_fc1 = ceil((fc1*N)/fe);
    filtre_pass_bas(1:index_fc1)=1;
    filtre_pass_bas(N-index_fc1+1:N)=1;
    
    %application du filtre
    ecg_filtre_bas_freq = filtre_pass_bas .*fft(ecg_filtre_temp);
 
    %restitution du signal filtrer
    ecg_filtre_bas_temp = ifft(ecg_filtre_bas_freq,"symmetric");  
    
    %bruit haute frequence
    bruit_haut = ecg_filtre_int_temp-ecg_filtre_bas_temp; 
 

%%    
    
% representation 

subplot(4,3,1)
plot(t,ecg,'linewidth',1)
xlim([0.5 1.5])
legend(" signal d'origine")

subplot(4,3,2)
plot(fshift,fftshift(abs(y)));
legend("spectre du signal d'origine")


subplot(4,3,3)

plot(t,bruit,'linewidth',1);
legend("bruit")


subplot(4,3,4)
plot(t,ecg_filtre_temp,'linewidth',1);
xlim([0.5 1.5])
legend("signal filtre")

subplot(4,3,5)
plot(fshift,fftshift(abs(fft(ecg_filtre_temp))));
legend("spectre du signal filtrer")

subplot(4,3,6)
plot(t,bruit_inter,"Linewidth",1)
legend("bruit interferance")

subplot(4,3,7)
plot(t,ecg_filtre_int_temp,'linewidth',1);
legend(" signal filtrer interferance")
xlim([0.5 1.5])

subplot(4,3,8)
plot(fshift,fftshift(abs(fft(ecg_filtre_int_temp))));
legend("spectre du signal filtrer")


subplot(4,3,9)
plot(t,bruit_haut,'linewidth',1);
legend("bruit")

subplot(4,3,10)
plot(t,ecg_filtre_bas_temp,'linewidth',1);
xlim([0.5 1.5])
legend("signal filtre")

subplot(4,3,11)
plot(fshift,fftshift(abs(fft(ecg_filtre_bas_temp))));
legend("spectre du signal filtrer")

%%

% subplot(1,3,1)
% plot(f,filtre_pass_Haut,"Linewidth",1.5)
% legend("Filtre pass  haut")

% subplot(1,3,3)
% plot(f,filtre_interferance,"Linewidth",1.5)
% legend("Filtre interferance")

% subplot(4,3,12)
% 
% plot(t,bruit,'linewidth',1);
% legend("bruit")




      ***Explication: ***
      
Ce code est utilisé pour filtrer un signal d'électrocardiogramme (ECG). Il charge un signal ECG à partir d'un fichier nommé "ecg.mat"
et applique ensuite plusieurs opérations de filtrage au signal en utilisant la transformée de Fourier rapide (FFT).

Il commence par appliquer un filtre passe-haut au signal ECG, avec une fréquence de coupure de 0,5 Hz pour supprimer le bruit de basse fréquence. 
Puis, un deuxième filtre est utilisé pour supprimer le bruit de haute fréquence avec une fréquence de coupure de 50 Hz. 
Enfin, un troisième filtre est utilisé pour supprimer le bruit de fréquence entre 40 et 50 Hz.

Après chaque opération de filtrage, il utilise la transformée de Fourier inverse (IFFT) pour transformer le signal filtré de nouveau dans le domaine temporel. 
Il calcule également le bruit résiduel après chaque opération de filtrage, ce qui peut être utilisé pour évaluer l'efficacité du filtrage.

L'objectif global est de supprimer le bruit du signal ECG et obtenir un signal ECG sans bruit.
