  ***** TP2- Jeux de mots - Synthèse et analyse spectrale d’une gamme de musique *****
  
    +++ Jeux de mots +++
    
      *** Le Code: ***
      
clear all 
close all
clc

[x,fs]=audioread("phrase.au");

Taille = length(x);
ts=1/fs;
T = (0:Taille-1)*ts;

%original sound and signal
sound(x,fs);
plot(T,x);


y=fft(x);
Densite_spectrale_phrase = abs(y).^2/Taille;
f = (0:floor(Taille/2))*(fs/Taille);
% plot(f,Densite_spectrale_phrase(1:floor(Taille/2)+1));

%segmentation
%first segmentation 'rien ne sert de'
seg1 = x(1:130106);
% sound(seg1,fs);

%second segmentation 'courir'
seg2=x(130107:190006);
%sound(seg2,fs);
        
%third segmentation 'il faut'
seg3=x(190007:250006);
%sound(seg3,fs);
        
%4th segmentation 'partir a point'
 seg4=x(250007:394240);
 %sound(seg4,fs);

%réarrangé la phrase 
sound([seg1;seg4;seg3;seg2],fs);


       *** Explication: ***
       
Ce code lit un fichier audio appelé "phrase.au" et enregistre les données dans le tableau x et la fréquence d'échantillonnage dans la variable fs.
La longueur des données audio est enregistrée dans la variable Taille, et l'intervalle d'échantillonnage est calculé comme ts = 1/fs.
Un vecteur temps T est alors créé pour la durée des données audio.

Le son d'origine est joué à l'aide de la fonction sound et la série temporelle des données audio est tracée à l'aide de la fonction plot.
Le spectre de puissance des données audio est calculé à l'aide de la FFT et normalisé par la longueur de la série Taille. 
Un vecteur de fréquences f est alors créé et le spectre de puissance est tracé.

Le signal audio est ensuite segmenté en quatre parties, qui sont stockées dans les tableaux seg1, seg2, seg3 et seg4. 
Les segments audio sont joués à l'aide de la fonction sound. Enfin, la phrase est réarrangée en concaténant ces segments dans l'ordre seg1, seg4, seg3 
et seg2, et le son est joué à l'aide de la fonction sound.

